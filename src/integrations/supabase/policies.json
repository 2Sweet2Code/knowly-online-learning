[
    {
      "schemaname": "public",
      "tablename": "admin_applications",
      "policyname": "Instructors can update admin application status",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = admin_applications.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": "((status = ANY (ARRAY['approved'::text, 'rejected'::text])) AND (EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = admin_applications.course_id) AND (courses.instructor_id = auth.uid())))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "admin_applications",
      "policyname": "Instructors can view admin applications for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = admin_applications.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignment_submissions",
      "policyname": "Instructors can update submissions for their courses",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM (courses\n     JOIN assignments ON ((assignments.course_id = courses.id)))\n  WHERE ((assignments.id = assignment_submissions.assignment_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignment_submissions",
      "policyname": "Instructors can view all submissions for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM (courses\n     JOIN assignments ON ((assignments.course_id = courses.id)))\n  WHERE ((assignments.id = assignment_submissions.assignment_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignments",
      "policyname": "Combined assignments view policy",
      "cmd": "SELECT",
      "roles": "authenticated",
      "permissive": true,
      "qual": "((EXISTS ( SELECT 1\n   FROM courses c\n  WHERE ((c.id = assignments.course_id) AND (c.instructor_id = ( SELECT auth.uid() AS uid))))) OR (EXISTS ( SELECT 1\n   FROM enrollments e\n  WHERE ((e.course_id = assignments.course_id) AND (e.user_id = ( SELECT auth.uid() AS uid))))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignments",
      "policyname": "Instructors can insert assignments for their courses",
      "cmd": "INSERT",
      "roles": "",
      "permissive": true,
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = assignments.course_id) AND (courses.instructor_id = auth.uid()))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignments",
      "policyname": "Instructors can update their own assignments",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = assignments.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = assignments.course_id) AND (courses.instructor_id = auth.uid()))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignments",
      "policyname": "Instructors can view all assignments for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = assignments.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "assignments",
      "policyname": "Students can view assignments for their enrolled courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM enrollments\n  WHERE ((enrollments.course_id = assignments.course_id) AND (enrollments.user_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_admins",
      "policyname": "Admins and instructors can create admin applications",
      "cmd": "INSERT",
      "roles": "authenticated",
      "permissive": true,
      "qual": null,
      "with_check": "((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = ANY (ARRAY['admin'::text, 'instructor'::text]))))) AND (EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_admins.course_id) AND (courses.allow_admin_applications = true)))) AND (NOT (EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_admins.course_id) AND (courses.instructor_id = auth.uid()))))) AND (NOT (EXISTS ( SELECT 1\n   FROM course_admins ca\n  WHERE ((ca.course_id = course_admins.course_id) AND (ca.user_id = auth.uid()) AND (ca.status = ANY (ARRAY['pending'::text, 'approved'::text])))))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_admins",
      "policyname": "Instructors can update admin application status",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_admins.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": "((status = ANY (ARRAY['approved'::text, 'rejected'::text])) AND (EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_admins.course_id) AND (courses.instructor_id = auth.uid())))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_admins",
      "policyname": "Instructors can view admin applications for their courses",
      "cmd": "SELECT",
      "roles": "authenticated",
      "permissive": true,
      "qual": "((EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_admins.course_id) AND (courses.instructor_id = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_comments",
      "policyname": "Combined comments insert policy",
      "cmd": "INSERT",
      "roles": "authenticated",
      "permissive": true,
      "qual": null,
      "with_check": "((user_id = ( SELECT auth.uid() AS uid)) AND ((EXISTS ( SELECT 1\n   FROM enrollments e\n  WHERE ((e.course_id = course_comments.course_id) AND (e.user_id = ( SELECT auth.uid() AS uid))))) OR true))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_comments",
      "policyname": "Combined comments view policy",
      "cmd": "SELECT",
      "roles": "authenticated",
      "permissive": true,
      "qual": "(((is_public = true) AND (EXISTS ( SELECT 1\n   FROM enrollments e\n  WHERE ((e.course_id = course_comments.course_id) AND (e.user_id = ( SELECT auth.uid() AS uid)))))) OR (EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = ( SELECT auth.uid() AS uid)) AND ((p.role = 'instructor'::text) OR (p.role = 'admin'::text))))) OR (EXISTS ( SELECT 1\n   FROM courses c\n  WHERE ((c.id = course_comments.course_id) AND (c.instructor_id = ( SELECT auth.uid() AS uid))))) OR ((is_public = true) OR (user_id = ( SELECT auth.uid() AS uid))) OR (user_id = ( SELECT auth.uid() AS uid)))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Enable insert for course instructors",
      "cmd": "INSERT",
      "roles": "authenticated",
      "permissive": true,
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM enrollments\n  WHERE ((enrollments.course_id = course_content.course_id) AND (enrollments.user_id = auth.uid()) AND (enrollments.role = 'instructor'::text))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Enable read access for course members",
      "cmd": "SELECT",
      "roles": "authenticated",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM enrollments\n  WHERE ((enrollments.course_id = course_content.course_id) AND (enrollments.user_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Instructors can delete their own content",
      "cmd": "DELETE",
      "roles": "",
      "permissive": true,
      "qual": "((EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_content.course_id) AND (courses.instructor_id = auth.uid())))) AND (created_by = auth.uid()))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Instructors can insert content for their courses",
      "cmd": "INSERT",
      "roles": "",
      "permissive": true,
      "qual": null,
      "with_check": "((EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_content.course_id) AND (courses.instructor_id = auth.uid())))) AND (created_by = auth.uid()))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Instructors can update their own content",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "((EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_content.course_id) AND (courses.instructor_id = auth.uid())))) AND (created_by = auth.uid()))",
      "with_check": "((EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_content.course_id) AND (courses.instructor_id = auth.uid())))) AND (created_by = auth.uid()))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Instructors can view all content for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = course_content.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "course_content",
      "policyname": "Students can view published content for their enrolled courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM enrollments\n  WHERE ((enrollments.course_id = course_content.course_id) AND (enrollments.user_id = auth.uid()) AND (course_content.is_published = true))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "enrollments",
      "policyname": "Combined enrollments view policy",
      "cmd": "SELECT",
      "roles": "authenticated",
      "permissive": true,
      "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM (profiles p\n     JOIN courses c ON ((c.id = enrollments.course_id)))\n  WHERE (((p.id = ( SELECT auth.uid() AS uid)) AND (p.role = 'instructor'::text) AND (c.instructor_id = p.id)) OR ((p.id = ( SELECT auth.uid() AS uid)) AND (p.role = 'admin'::text))))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "enrollments",
      "policyname": "Course admins can manage enrollments",
      "cmd": "ALL",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM course_admins\n  WHERE ((course_admins.course_id = enrollments.course_id) AND (course_admins.user_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "enrollments",
      "policyname": "Course admins can view enrollments for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM course_admins ca\n  WHERE ((ca.course_id = enrollments.course_id) AND (ca.user_id = auth.uid()) AND (ca.status = 'approved'::text))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "enrollments",
      "policyname": "Users can view their own enrollments",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "((auth.uid() = user_id) OR (auth.uid() IN ( SELECT course_admins.user_id\n   FROM course_admins\n  WHERE (course_admins.course_id = enrollments.course_id))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "instructor_applications",
      "policyname": "Instructors can update instructor application status",
      "cmd": "UPDATE",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = instructor_applications.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": "((status = ANY (ARRAY['approved'::text, 'rejected'::text])) AND (EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = instructor_applications.course_id) AND (courses.instructor_id = auth.uid())))))",
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "instructor_applications",
      "policyname": "Instructors can view instructor applications for their courses",
      "cmd": "SELECT",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = instructor_applications.course_id) AND (courses.instructor_id = auth.uid()))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "student_grades",
      "policyname": "Course admins can manage grades",
      "cmd": "ALL",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM course_admins ca\n  WHERE ((ca.course_id = student_grades.course_id) AND (ca.user_id = ( SELECT auth.uid() AS uid)) AND (ca.status = 'approved'::text))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    },
    {
      "schemaname": "public",
      "tablename": "student_grades",
      "policyname": "Instructors can manage grades for their courses",
      "cmd": "ALL",
      "roles": "",
      "permissive": true,
      "qual": "(EXISTS ( SELECT 1\n   FROM courses c\n  WHERE ((c.id = student_grades.course_id) AND (c.instructor_id = ( SELECT auth.uid() AS uid)))))",
      "with_check": null,
      "recursion_warning": "POTENTIAL RECURSION - Check this policy"
    }
  ]