// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/database.types';

// TODO: Replace these with your actual Supabase project credentials
const SUPABASE_URL = "https://oemwaoaebmwdfrndohmh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9lbXdhb2FlYm13ZGZybmRvaG1oIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM2NzQ2NDgsImV4cCI6MjA1OTI1MDY0OH0.KuPNahbiyWtJbWfLpo96ojHDJ-IY4l_kB842-H35J2E";

// No env check needed when hardcoding


// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the base client
const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

// Add type-safe RPC method
type RPCOptions = {
  // Add your RPC function names and their parameter types here
  check_course_admin_simple: {
    p_user_id: string;
    p_course_id: string;
  };
  // Add more RPC functions as needed
};

// Export the supabase client with type-safe RPC
// We'll use type assertion to add our RPC types while preserving all other methods
export const supabase = client as typeof client & {
  rpc: <K extends keyof RPCOptions>(
    fn: K,
    params: RPCOptions[K]
  ) => ReturnType<typeof client.rpc>;
};
